require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe GamesController do
  it_should_behave_like 'application controller subclass'

  # This should return the minimal set of attributes required to create a valid
  # Game. As you add validations to Game, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  describe "GET index" do
    let!(:season) { Season.create! }
    let!(:newest_season) { Season.create! }

    context '@season' do
      context 'without params[:season_id]' do
        it 'is assigned the newest season' do
          get :index
          assigns(:season).should eq(newest_season)
        end
      end

      context 'with params[:season_id]' do
        context 'without value present' do
          it 'is assigned the newest season' do
            get :index, :season_id => nil
            assigns(:season).should eq(newest_season)

            get :index, :season_id => ''
            assigns(:season).should eq(newest_season)
          end
        end

        context 'with value present' do
          it 'is assigned the requested season' do
            get :index, :season_id => season.id.to_s
            assigns(:season).should eq(season)

            get :index, :season_id => newest_season.id.to_s
            assigns(:season).should eq(newest_season)
          end
        end
      end
    end

    context '@games' do
      let!(:excluded_game) do
        Game.create!(
          valid_attributes.merge({ :season_id => season.id })
        )
      end
      let!(:game1) do
        Game.create!(
          valid_attributes.merge({ :season_id => newest_season.id, :puck_drop => 2.months.from_now})
        )
      end
      let!(:game2) do
        Game.create!(
          valid_attributes.merge({ :season_id => newest_season.id, :puck_drop => 1.month.from_now })
        )
      end

      it "assigns all games part of @season as @games sorted by puck_drop" do
        get :index
        assigns(:games).should eq([game2, game1])
      end
    end
  end

  describe "GET show" do
    it "assigns the requested game as @game" do
      game = Game.create! valid_attributes
      get :show, :id => game.id.to_s
      assigns(:game).should eq(game)
    end

    context '@ticket_holders' do
      let!(:season) { Season.create! }
      let!(:other_season) { Season.create! }
      let!(:game) { Game.create!(valid_attributes.merge(:season_id => season.id)) }
      let(:tickets) { game.tickets }
      let!(:ticket_holder1) { TicketHolder.create!(:season_id => season.id, :name => 'Anakin') }
      let!(:ticket_holder2) { TicketHolder.create!(:season_id => season.id, :name => 'Obiwan') }
      let!(:other_season_ticket_holder) do
        TicketHolder.create!(:season_id => other_season.id)
      end
      let!(:over_limit_ticket_holder) do
        TicketHolder.create!(:season_id => season.id, :name => 'Dooku').tap do |ticket_holder|
          tickets[0].update_column(:ticket_holder_id, ticket_holder)
        end
      end
      let(:expected_ticket_holders) { [ticket_holder1, ticket_holder2] }

      it 'assigns all ticket holders within game season under the limit ordered by name' do
        get :show, :id => game.id.to_s
        assigns(:ticket_holders).should eq(expected_ticket_holders)
      end
    end
  end

  describe "GET new" do
    it "assigns a new game as @game" do
      get :new
      assigns(:game).should be_a_new(Game)
    end

    context '@seasons' do
      before do
        Season.create!(:years => '2011-12')
        Season.create!(:years => '2012-13')
      end

      it 'is assigned available seasons' do
        get :new
        assigns(:seasons).should eq(Season.all)
      end
    end
  end

  describe "GET edit" do
    let(:game) { Game.create! valid_attributes }

    it "assigns the requested game as @game" do
      get :edit, :id => game.id.to_s
      assigns(:game).should eq(game)
    end

    context '@seasons' do
      before do
        Season.create!(:years => '2011-12')
        Season.create!(:years => '2012-13')
      end

      it 'is assigned available seasons' do
        get :edit, :id => game.id.to_s
        assigns(:seasons).should eq(Season.all)
      end
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Game" do
        expect {
          post :create, :game => valid_attributes
        }.to change(Game, :count).by(1)
      end

      it "assigns a newly created game as @game" do
        post :create, :game => valid_attributes
        assigns(:game).should be_a(Game)
        assigns(:game).should be_persisted
      end

      it "redirects to the created game" do
        post :create, :game => valid_attributes
        response.should redirect_to(Game.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved game as @game" do
        # Trigger the behavior that occurs when invalid params are submitted
        Game.any_instance.stub(:save).and_return(false)
        post :create, :game => {}
        assigns(:game).should be_a_new(Game)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Game.any_instance.stub(:save).and_return(false)
        post :create, :game => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested game" do
        game = Game.create! valid_attributes
        # Assuming there are no other games in the database, this
        # specifies that the Game created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Game.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => game.id, :game => {'these' => 'params'}
      end

      it "assigns the requested game as @game" do
        game = Game.create! valid_attributes
        put :update, :id => game.id, :game => valid_attributes
        assigns(:game).should eq(game)
      end

      it "redirects to the game" do
        game = Game.create! valid_attributes
        put :update, :id => game.id, :game => valid_attributes
        response.should redirect_to(game)
      end
    end

    describe "with invalid params" do
      let(:game) { Game.create! valid_attributes }

      it "assigns the game as @game" do
        # Trigger the behavior that occurs when invalid params are submitted
        Game.any_instance.stub(:save).and_return(false)
        put :update, :id => game.id.to_s, :game => {}
        assigns(:game).should eq(game)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Game.any_instance.stub(:save).and_return(false)
        put :update, :id => game.id.to_s, :game => {}
        response.should render_template("edit")
      end

      context '@seasons' do
        before do
          Season.create!(:years => '2011-12')
          Season.create!(:years => '2012-13')
        end

        it 'is assigned available seasons' do
          put :update, :id => game.id.to_s, :game => {}
          assigns(:seasons).should eq(Season.all)
        end
      end
    end
  end

end
